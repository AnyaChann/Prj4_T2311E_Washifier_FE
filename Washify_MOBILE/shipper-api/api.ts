/* tslint:disable */
/* eslint-disable */
/**
 * üß∫ Washify API Documentation
 * API documentation for Washify - Laundry Management System  H·∫ßu h·∫øt APIs y√™u c·∫ßu JWT token. S·ª≠ d·ª•ng endpoint /api/auth/login ƒë·ªÉ l·∫•y token.  **API Groups:** - Customer API: Endpoints cho kh√°ch h√†ng (ƒë·∫∑t h√†ng, thanh to√°n, review) - Admin API: Endpoints cho qu·∫£n l√Ω (ADMIN, MANAGER, STAFF) - Shipper API: Endpoints cho shipper (giao h√†ng) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@washify.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface ApiResponseBoolean {
    'success'?: boolean;
    'message'?: string;
    'data'?: boolean;
    'timestamp'?: string;
}
export interface ApiResponseListNotificationResponse {
    'success'?: boolean;
    'message'?: string;
    'data'?: Array<NotificationResponse>;
    'timestamp'?: string;
}
export interface ApiResponseLong {
    'success'?: boolean;
    'message'?: string;
    'data'?: number;
    'timestamp'?: string;
}
export interface ApiResponseMapStringObject {
    'success'?: boolean;
    'message'?: string;
    'data'?: { [key: string]: object; };
    'timestamp'?: string;
}
export interface ApiResponseNotificationResponse {
    'success'?: boolean;
    'message'?: string;
    'data'?: NotificationResponse;
    'timestamp'?: string;
}
export interface ApiResponsePageNotificationResponse {
    'success'?: boolean;
    'message'?: string;
    'data'?: PageNotificationResponse;
    'timestamp'?: string;
}
export interface ApiResponseVoid {
    'success'?: boolean;
    'message'?: string;
    'data'?: object;
    'timestamp'?: string;
}
export interface ForgotPasswordRequest {
    'email': string;
}
export interface NotificationRequest {
    'userId': number;
    'title': string;
    'message': string;
    'type': NotificationRequestTypeEnum;
    'relatedId'?: number;
}

export const NotificationRequestTypeEnum = {
    OrderCreated: 'ORDER_CREATED',
    OrderConfirmed: 'ORDER_CONFIRMED',
    OrderProcessing: 'ORDER_PROCESSING',
    OrderReady: 'ORDER_READY',
    OrderDelivering: 'ORDER_DELIVERING',
    OrderCompleted: 'ORDER_COMPLETED',
    OrderCancelled: 'ORDER_CANCELLED',
    PaymentSuccess: 'PAYMENT_SUCCESS',
    PaymentFailed: 'PAYMENT_FAILED',
    Promotion: 'PROMOTION',
    System: 'SYSTEM',
    Other: 'OTHER'
} as const;

export type NotificationRequestTypeEnum = typeof NotificationRequestTypeEnum[keyof typeof NotificationRequestTypeEnum];

export interface NotificationResponse {
    'id'?: number;
    'userId'?: number;
    'username'?: string;
    'title'?: string;
    'message'?: string;
    'type'?: string;
    'relatedId'?: number;
    'isRead'?: boolean;
    'readAt'?: string;
    'createdAt'?: string;
}
export interface PageNotificationResponse {
    'totalElements'?: number;
    'totalPages'?: number;
    'size'?: number;
    'content'?: Array<NotificationResponse>;
    'number'?: number;
    'sort'?: Array<SortObject>;
    'first'?: boolean;
    'last'?: boolean;
    'numberOfElements'?: number;
    'pageable'?: PageableObject;
    'empty'?: boolean;
}
export interface PageableObject {
    'offset'?: number;
    'sort'?: Array<SortObject>;
    'unpaged'?: boolean;
    'paged'?: boolean;
    'pageSize'?: number;
    'pageNumber'?: number;
}
export interface ResetPasswordRequest {
    'token': string;
    'newPassword': string;
    'confirmPassword': string;
}
export interface ShipperRequest {
    'fullName': string;
    'phoneNumber': string;
    'email'?: string;
    'vehicleType'?: string;
    'vehicleNumber'?: string;
    'address'?: string;
    'isActive'?: boolean;
}
export interface ShipperResponse {
    'id'?: number;
    'name'?: string;
    'phone'?: string;
    'vehicleNumber'?: string;
    'isActive'?: boolean;
    'createdAt'?: string;
    'updatedAt'?: string;
    'deletedAt'?: string;
}
export interface ShipperStatistics {
    'shipperId'?: number;
    'shipperName'?: string;
    'totalShipments'?: number;
    'completedShipments'?: number;
    'activeShipments'?: number;
    'active'?: boolean;
}
export interface SortObject {
    'direction'?: string;
    'nullHandling'?: string;
    'ascending'?: boolean;
    'property'?: string;
    'ignoreCase'?: boolean;
}

/**
 * EmailVerificationApi - axios parameter creator
 */
export const EmailVerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check ƒë·∫ßy ƒë·ªß bao g·ªìm SMTP verification. Ch·∫≠m, d√πng c·∫©n th·∫≠n!
         * @summary X√°c th·ª±c email s√¢u (SMTP)
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deepVerify: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('deepVerify', 'email', email)
            const localVarPath = `/api/auth/email/verify-deep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  X√°c th·ª±c email ƒë·∫ßy ƒë·ªß: Format + Disposable + MX records.  **3 Levels Check:** 1. ‚úÖ Format validation (RFC 5322) 2. ‚úÖ Disposable email check (block tempmail) 3. ‚úÖ MX records check (domain c√≥ th·ªÉ nh·∫≠n email)  **Speed:** 50-200ms (DNS query)  **Use Case:** - Verify email tr∆∞·ªõc khi register - Ensure email c√≥ th·ªÉ nh·∫≠n mail - Block fake domains  **Examples:** - ‚úÖ test@gmail.com ‚Üí Valid (has MX records) - ‚ùå test@tempmail.com ‚Üí Invalid (disposable) - ‚ùå test@fakefake123.com ‚Üí Invalid (no MX records)  **Response:** ```json {   \"email\": \"test@gmail.com\",   \"validFormat\": true,   \"isDisposable\": false,   \"hasMXRecords\": true,   \"mxRecords\": [\"gmail-smtp-in.l.google.com\"],   \"isValid\": true,   \"reason\": \"Email h·ª£p l·ªá v√† c√≥ th·ªÉ nh·∫≠n email\" } ``` 
         * @summary üåê Full email verification
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullVerify: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('fullVerify', 'email', email)
            const localVarPath = `/api/auth/email/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Ki·ªÉm tra nhanh email format v√† disposable email.  **Checks:** - ‚úÖ Format validation (RFC 5322) - ‚úÖ Disposable email check (tempmail, guerrillamail, etc.)  **Speed:** < 1ms (very fast)  **Use Case:** - Frontend real-time validation - Check email tr∆∞·ªõc khi ƒëƒÉng k√Ω - Block disposable emails  **Response:** ```json {   \"email\": \"test@gmail.com\",   \"validFormat\": true,   \"isDisposable\": false,   \"isValid\": true } ``` 
         * @summary üåê Quick check email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickCheck: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('quickCheck', 'email', email)
            const localVarPath = `/api/auth/email/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailVerificationApi - functional programming interface
 */
export const EmailVerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailVerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * Check ƒë·∫ßy ƒë·ªß bao g·ªìm SMTP verification. Ch·∫≠m, d√πng c·∫©n th·∫≠n!
         * @summary X√°c th·ª±c email s√¢u (SMTP)
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deepVerify(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMapStringObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deepVerify(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailVerificationApi.deepVerify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  X√°c th·ª±c email ƒë·∫ßy ƒë·ªß: Format + Disposable + MX records.  **3 Levels Check:** 1. ‚úÖ Format validation (RFC 5322) 2. ‚úÖ Disposable email check (block tempmail) 3. ‚úÖ MX records check (domain c√≥ th·ªÉ nh·∫≠n email)  **Speed:** 50-200ms (DNS query)  **Use Case:** - Verify email tr∆∞·ªõc khi register - Ensure email c√≥ th·ªÉ nh·∫≠n mail - Block fake domains  **Examples:** - ‚úÖ test@gmail.com ‚Üí Valid (has MX records) - ‚ùå test@tempmail.com ‚Üí Invalid (disposable) - ‚ùå test@fakefake123.com ‚Üí Invalid (no MX records)  **Response:** ```json {   \"email\": \"test@gmail.com\",   \"validFormat\": true,   \"isDisposable\": false,   \"hasMXRecords\": true,   \"mxRecords\": [\"gmail-smtp-in.l.google.com\"],   \"isValid\": true,   \"reason\": \"Email h·ª£p l·ªá v√† c√≥ th·ªÉ nh·∫≠n email\" } ``` 
         * @summary üåê Full email verification
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fullVerify(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMapStringObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fullVerify(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailVerificationApi.fullVerify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Ki·ªÉm tra nhanh email format v√† disposable email.  **Checks:** - ‚úÖ Format validation (RFC 5322) - ‚úÖ Disposable email check (tempmail, guerrillamail, etc.)  **Speed:** < 1ms (very fast)  **Use Case:** - Frontend real-time validation - Check email tr∆∞·ªõc khi ƒëƒÉng k√Ω - Block disposable emails  **Response:** ```json {   \"email\": \"test@gmail.com\",   \"validFormat\": true,   \"isDisposable\": false,   \"isValid\": true } ``` 
         * @summary üåê Quick check email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quickCheck(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMapStringObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quickCheck(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailVerificationApi.quickCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmailVerificationApi - factory interface
 */
export const EmailVerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailVerificationApiFp(configuration)
    return {
        /**
         * Check ƒë·∫ßy ƒë·ªß bao g·ªìm SMTP verification. Ch·∫≠m, d√πng c·∫©n th·∫≠n!
         * @summary X√°c th·ª±c email s√¢u (SMTP)
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deepVerify(email: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMapStringObject> {
            return localVarFp.deepVerify(email, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  X√°c th·ª±c email ƒë·∫ßy ƒë·ªß: Format + Disposable + MX records.  **3 Levels Check:** 1. ‚úÖ Format validation (RFC 5322) 2. ‚úÖ Disposable email check (block tempmail) 3. ‚úÖ MX records check (domain c√≥ th·ªÉ nh·∫≠n email)  **Speed:** 50-200ms (DNS query)  **Use Case:** - Verify email tr∆∞·ªõc khi register - Ensure email c√≥ th·ªÉ nh·∫≠n mail - Block fake domains  **Examples:** - ‚úÖ test@gmail.com ‚Üí Valid (has MX records) - ‚ùå test@tempmail.com ‚Üí Invalid (disposable) - ‚ùå test@fakefake123.com ‚Üí Invalid (no MX records)  **Response:** ```json {   \"email\": \"test@gmail.com\",   \"validFormat\": true,   \"isDisposable\": false,   \"hasMXRecords\": true,   \"mxRecords\": [\"gmail-smtp-in.l.google.com\"],   \"isValid\": true,   \"reason\": \"Email h·ª£p l·ªá v√† c√≥ th·ªÉ nh·∫≠n email\" } ``` 
         * @summary üåê Full email verification
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullVerify(email: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMapStringObject> {
            return localVarFp.fullVerify(email, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Ki·ªÉm tra nhanh email format v√† disposable email.  **Checks:** - ‚úÖ Format validation (RFC 5322) - ‚úÖ Disposable email check (tempmail, guerrillamail, etc.)  **Speed:** < 1ms (very fast)  **Use Case:** - Frontend real-time validation - Check email tr∆∞·ªõc khi ƒëƒÉng k√Ω - Block disposable emails  **Response:** ```json {   \"email\": \"test@gmail.com\",   \"validFormat\": true,   \"isDisposable\": false,   \"isValid\": true } ``` 
         * @summary üåê Quick check email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickCheck(email: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMapStringObject> {
            return localVarFp.quickCheck(email, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailVerificationApi - object-oriented interface
 */
export class EmailVerificationApi extends BaseAPI {
    /**
     * Check ƒë·∫ßy ƒë·ªß bao g·ªìm SMTP verification. Ch·∫≠m, d√πng c·∫©n th·∫≠n!
     * @summary X√°c th·ª±c email s√¢u (SMTP)
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deepVerify(email: string, options?: RawAxiosRequestConfig) {
        return EmailVerificationApiFp(this.configuration).deepVerify(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  X√°c th·ª±c email ƒë·∫ßy ƒë·ªß: Format + Disposable + MX records.  **3 Levels Check:** 1. ‚úÖ Format validation (RFC 5322) 2. ‚úÖ Disposable email check (block tempmail) 3. ‚úÖ MX records check (domain c√≥ th·ªÉ nh·∫≠n email)  **Speed:** 50-200ms (DNS query)  **Use Case:** - Verify email tr∆∞·ªõc khi register - Ensure email c√≥ th·ªÉ nh·∫≠n mail - Block fake domains  **Examples:** - ‚úÖ test@gmail.com ‚Üí Valid (has MX records) - ‚ùå test@tempmail.com ‚Üí Invalid (disposable) - ‚ùå test@fakefake123.com ‚Üí Invalid (no MX records)  **Response:** ```json {   \"email\": \"test@gmail.com\",   \"validFormat\": true,   \"isDisposable\": false,   \"hasMXRecords\": true,   \"mxRecords\": [\"gmail-smtp-in.l.google.com\"],   \"isValid\": true,   \"reason\": \"Email h·ª£p l·ªá v√† c√≥ th·ªÉ nh·∫≠n email\" } ``` 
     * @summary üåê Full email verification
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public fullVerify(email: string, options?: RawAxiosRequestConfig) {
        return EmailVerificationApiFp(this.configuration).fullVerify(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Ki·ªÉm tra nhanh email format v√† disposable email.  **Checks:** - ‚úÖ Format validation (RFC 5322) - ‚úÖ Disposable email check (tempmail, guerrillamail, etc.)  **Speed:** < 1ms (very fast)  **Use Case:** - Frontend real-time validation - Check email tr∆∞·ªõc khi ƒëƒÉng k√Ω - Block disposable emails  **Response:** ```json {   \"email\": \"test@gmail.com\",   \"validFormat\": true,   \"isDisposable\": false,   \"isValid\": true } ``` 
     * @summary üåê Quick check email
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public quickCheck(email: string, options?: RawAxiosRequestConfig) {
        return EmailVerificationApiFp(this.configuration).quickCheck(email, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationsApi - axios parameter creator
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @summary ƒê·∫øm th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countUnread: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notifications/unread/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * T·∫°o th√¥ng b√°o cho user (Admin/Staff only)
         * @summary T·∫°o th√¥ng b√°o m·ªõi
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification: async (notificationRequest: NotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('createNotification', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * X√≥a th√¥ng b√°o
         * @summary X√≥a th√¥ng b√°o
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNotification', 'id', id)
            const localVarPath = `/api/notifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o trong h·ªá th·ªëng (Admin/Staff/Manager)
         * @summary L·∫•y t·∫•t c·∫£ th√¥ng b√°o
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNotifications: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
         * @summary L·∫•y th√¥ng b√°o c·ªßa t√¥i
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyNotifications: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notifications/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa user hi·ªán t·∫°i
         * @summary L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnreadNotifications: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notifications/unread`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * L·∫•y th√¥ng b√°o c·ªßa m·ªôt user c·ª• th·ªÉ (Admin/Staff/Manager)
         * @summary L·∫•y th√¥ng b√°o c·ªßa user
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotificationsById: async (userId: number, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserNotificationsById', 'userId', userId)
            const localVarPath = `/api/notifications/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
         * @summary ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllAsRead: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notifications/read-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
         * @summary ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsRead: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('markAsRead', 'id', id)
            const localVarPath = `/api/notifications/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * G·ª≠i th√¥ng b√°o cho nhi·ªÅu user (Admin only)
         * @summary G·ª≠i th√¥ng b√°o h√†ng lo·∫°t
         * @param {Array<number>} userIds 
         * @param {string} title 
         * @param {string} message 
         * @param {SendBulkNotificationsTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBulkNotifications: async (userIds: Array<number>, title: string, message: string, type: SendBulkNotificationsTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIds' is not null or undefined
            assertParamExists('sendBulkNotifications', 'userIds', userIds)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('sendBulkNotifications', 'title', title)
            // verify required parameter 'message' is not null or undefined
            assertParamExists('sendBulkNotifications', 'message', message)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('sendBulkNotifications', 'type', type)
            const localVarPath = `/api/notifications/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userIds) {
                localVarQueryParameter['userIds'] = userIds;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @summary ƒê·∫øm th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countUnread(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countUnread(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.countUnread']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * T·∫°o th√¥ng b√°o cho user (Admin/Staff only)
         * @summary T·∫°o th√¥ng b√°o m·ªõi
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotification(notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNotification(notificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.createNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * X√≥a th√¥ng b√°o
         * @summary X√≥a th√¥ng b√°o
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotification(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotification(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.deleteNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o trong h·ªá th·ªëng (Admin/Staff/Manager)
         * @summary L·∫•y t·∫•t c·∫£ th√¥ng b√°o
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNotifications(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNotifications(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.getAllNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
         * @summary L·∫•y th√¥ng b√°o c·ªßa t√¥i
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyNotifications(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyNotifications(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.getMyNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa user hi·ªán t·∫°i
         * @summary L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnreadNotifications(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnreadNotifications(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.getUnreadNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * L·∫•y th√¥ng b√°o c·ªßa m·ªôt user c·ª• th·ªÉ (Admin/Staff/Manager)
         * @summary L·∫•y th√¥ng b√°o c·ªßa user
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserNotificationsById(userId: number, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePageNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserNotificationsById(userId, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.getUserNotificationsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
         * @summary ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAllAsRead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAllAsRead(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.markAllAsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
         * @summary ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsRead(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsRead(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.markAsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * G·ª≠i th√¥ng b√°o cho nhi·ªÅu user (Admin only)
         * @summary G·ª≠i th√¥ng b√°o h√†ng lo·∫°t
         * @param {Array<number>} userIds 
         * @param {string} title 
         * @param {string} message 
         * @param {SendBulkNotificationsTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendBulkNotifications(userIds: Array<number>, title: string, message: string, type: SendBulkNotificationsTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendBulkNotifications(userIds, title, message, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.sendBulkNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationsApi - factory interface
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @summary ƒê·∫øm th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countUnread(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseLong> {
            return localVarFp.countUnread(options).then((request) => request(axios, basePath));
        },
        /**
         * T·∫°o th√¥ng b√°o cho user (Admin/Staff only)
         * @summary T·∫°o th√¥ng b√°o m·ªõi
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification(notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseNotificationResponse> {
            return localVarFp.createNotification(notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * X√≥a th√¥ng b√°o
         * @summary X√≥a th√¥ng b√°o
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteNotification(id, options).then((request) => request(axios, basePath));
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o trong h·ªá th·ªëng (Admin/Staff/Manager)
         * @summary L·∫•y t·∫•t c·∫£ th√¥ng b√°o
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNotifications(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageNotificationResponse> {
            return localVarFp.getAllNotifications(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
         * @summary L·∫•y th√¥ng b√°o c·ªßa t√¥i
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyNotifications(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageNotificationResponse> {
            return localVarFp.getMyNotifications(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * L·∫•y t·∫•t c·∫£ th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa user hi·ªán t·∫°i
         * @summary L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnreadNotifications(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListNotificationResponse> {
            return localVarFp.getUnreadNotifications(options).then((request) => request(axios, basePath));
        },
        /**
         * L·∫•y th√¥ng b√°o c·ªßa m·ªôt user c·ª• th·ªÉ (Admin/Staff/Manager)
         * @summary L·∫•y th√¥ng b√°o c·ªßa user
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotificationsById(userId: number, page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePageNotificationResponse> {
            return localVarFp.getUserNotificationsById(userId, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
         * @summary ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllAsRead(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.markAllAsRead(options).then((request) => request(axios, basePath));
        },
        /**
         * ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
         * @summary ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsRead(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseNotificationResponse> {
            return localVarFp.markAsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * G·ª≠i th√¥ng b√°o cho nhi·ªÅu user (Admin only)
         * @summary G·ª≠i th√¥ng b√°o h√†ng lo·∫°t
         * @param {Array<number>} userIds 
         * @param {string} title 
         * @param {string} message 
         * @param {SendBulkNotificationsTypeEnum} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBulkNotifications(userIds: Array<number>, title: string, message: string, type: SendBulkNotificationsTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.sendBulkNotifications(userIds, title, message, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 */
export class NotificationsApi extends BaseAPI {
    /**
     * ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
     * @summary ƒê·∫øm th√¥ng b√°o ch∆∞a ƒë·ªçc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public countUnread(options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).countUnread(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * T·∫°o th√¥ng b√°o cho user (Admin/Staff only)
     * @summary T·∫°o th√¥ng b√°o m·ªõi
     * @param {NotificationRequest} notificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createNotification(notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).createNotification(notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * X√≥a th√¥ng b√°o
     * @summary X√≥a th√¥ng b√°o
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteNotification(id: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).deleteNotification(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * L·∫•y t·∫•t c·∫£ th√¥ng b√°o trong h·ªá th·ªëng (Admin/Staff/Manager)
     * @summary L·∫•y t·∫•t c·∫£ th√¥ng b√°o
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getAllNotifications(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getAllNotifications(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
     * @summary L·∫•y th√¥ng b√°o c·ªßa t√¥i
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getMyNotifications(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getMyNotifications(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * L·∫•y t·∫•t c·∫£ th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa user hi·ªán t·∫°i
     * @summary L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getUnreadNotifications(options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getUnreadNotifications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * L·∫•y th√¥ng b√°o c·ªßa m·ªôt user c·ª• th·ªÉ (Admin/Staff/Manager)
     * @summary L·∫•y th√¥ng b√°o c·ªßa user
     * @param {number} userId 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getUserNotificationsById(userId: number, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getUserNotificationsById(userId, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
     * @summary ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public markAllAsRead(options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).markAllAsRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
     * @summary ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public markAsRead(id: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).markAsRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * G·ª≠i th√¥ng b√°o cho nhi·ªÅu user (Admin only)
     * @summary G·ª≠i th√¥ng b√°o h√†ng lo·∫°t
     * @param {Array<number>} userIds 
     * @param {string} title 
     * @param {string} message 
     * @param {SendBulkNotificationsTypeEnum} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public sendBulkNotifications(userIds: Array<number>, title: string, message: string, type: SendBulkNotificationsTypeEnum, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).sendBulkNotifications(userIds, title, message, type, options).then((request) => request(this.axios, this.basePath));
    }
}

export const SendBulkNotificationsTypeEnum = {
    OrderCreated: 'ORDER_CREATED',
    OrderConfirmed: 'ORDER_CONFIRMED',
    OrderProcessing: 'ORDER_PROCESSING',
    OrderReady: 'ORDER_READY',
    OrderDelivering: 'ORDER_DELIVERING',
    OrderCompleted: 'ORDER_COMPLETED',
    OrderCancelled: 'ORDER_CANCELLED',
    PaymentSuccess: 'PAYMENT_SUCCESS',
    PaymentFailed: 'PAYMENT_FAILED',
    Promotion: 'PROMOTION',
    System: 'SYSTEM',
    Other: 'OTHER'
} as const;
export type SendBulkNotificationsTypeEnum = typeof SendBulkNotificationsTypeEnum[keyof typeof SendBulkNotificationsTypeEnum];


/**
 * PasswordManagementApi - axios parameter creator
 */
export const PasswordManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication (verify qua token)  X√°c nh·∫≠n b·∫≠t/t·∫Øt 2FA cho password change.  **Flow:** 1. User request toggle 2FA (authenticated endpoint) 2. System t·∫°o token + send email 3. User click link trong email 4. Call API n√†y ƒë·ªÉ confirm 5. 2FA setting ƒë∆∞·ª£c c·∫≠p nh·∫≠t  **After Enable 2FA:** - User ƒë·ªïi password ‚Üí Ph·∫£i x√°c nh·∫≠n qua email - TƒÉng b·∫£o m·∫≠t  **After Disable 2FA:** - User ƒë·ªïi password ‚Üí ƒê·ªïi ngay (ch·ªâ c·∫ßn old password) - Ti·ªán l·ª£i h∆°n  **Response:** - Success: C·∫≠p nh·∫≠t 2FA setting th√†nh c√¥ng - Error: Token invalid/expired 
         * @summary üåê X√°c nh·∫≠n toggle 2FA
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirm2FAToggle: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('confirm2FAToggle', 'token', token)
            const localVarPath = `/api/auth/security/2fa-toggle/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  G·ª≠i email reset password cho user qu√™n m·∫≠t kh·∫©u.  **Email Verification:** - Check format email - Check disposable email (block) - Check MX records (domain t·ªìn t·∫°i)  **Flow:** 1. User nh·∫≠p email 2. System verify email 3. T·∫°o token (30 ph√∫t) 4. G·ª≠i email v·ªõi link reset  **Security:** - Kh√¥ng ti·∫øt l·ªô email c√≥ t·ªìn t·∫°i hay kh√¥ng - Lu√¥n return success message - Token one-time use  **Response:** - Success message (d√π email c√≥ t·ªìn t·∫°i hay kh√¥ng) 
         * @summary üåê Qu√™n m·∫≠t kh·∫©u (B∆∞·ªõc 1)
         * @param {ForgotPasswordRequest} forgotPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (forgotPasswordRequest: ForgotPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordRequest' is not null or undefined
            assertParamExists('forgotPassword', 'forgotPasswordRequest', forgotPasswordRequest)
            const localVarPath = `/api/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Reset password v·ªõi token t·ª´ email.  **Flow:** 1. User nh·∫≠p password m·ªõi + confirm 2. System validate token 3. Check password match 4. Update password (BCrypt hash) 5. Mark token as used 6. User c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi password m·ªõi  **Validations:** - Token valid (ch∆∞a h·∫øt h·∫°n, ch∆∞a d√πng) - Password >= 8 k√Ω t·ª± - Password match confirm password  **Security:** - Token one-time use - Password hashed with BCrypt - Old tokens deleted after success  **Response:** - Success: ƒê·ªïi password th√†nh c√¥ng - Error: Token invalid ho·∫∑c passwords kh√¥ng match 
         * @summary üåê Reset m·∫≠t kh·∫©u (B∆∞·ªõc 3)
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (resetPasswordRequest: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordRequest' is not null or undefined
            assertParamExists('resetPassword', 'resetPasswordRequest', resetPasswordRequest)
            const localVarPath = `/api/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Ki·ªÉm tra token reset password c√≤n h·ª£p l·ªá kh√¥ng.  **Use Case:** - Frontend check token khi user click link trong email - Hi·ªÉn th·ªã form reset password n·∫øu valid - Hi·ªÉn th·ªã error n·∫øu expired/invalid  **Validations:** - Token t·ªìn t·∫°i trong DB - Token ch∆∞a h·∫øt h·∫°n (30 ph√∫t) - Token ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng  **Response:** - true: Token h·ª£p l·ªá, cho ph√©p reset - false: Token expired/invalid 
         * @summary üåê Validate token reset (B∆∞·ªõc 2)
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateResetToken: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('validateResetToken', 'token', token)
            const localVarPath = `/api/auth/reset-password/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Validate token ƒë·ªÉ b·∫≠t/t·∫Øt 2FA setting.  **Context:** - User request b·∫≠t/t·∫Øt 2FA cho password change - System g·ª≠i email x√°c nh·∫≠n - User click link trong email - Frontend call API n√†y ƒë·ªÉ validate  **What is 2FA for Password Change?** - Khi B·∫¨T: ƒê·ªïi password ph·∫£i x√°c nh·∫≠n qua email - Khi T·∫ÆT: ƒê·ªïi password ngay l·∫≠p t·ª©c (ch·ªâ c·∫ßn password c≈©)  **Response:** - Success: Token valid - Error: Token expired/invalid 
         * @summary üåê Validate token toggle 2FA
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('validateToken', 'token', token)
            const localVarPath = `/api/auth/security/2fa-toggle/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordManagementApi - functional programming interface
 */
export const PasswordManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication (verify qua token)  X√°c nh·∫≠n b·∫≠t/t·∫Øt 2FA cho password change.  **Flow:** 1. User request toggle 2FA (authenticated endpoint) 2. System t·∫°o token + send email 3. User click link trong email 4. Call API n√†y ƒë·ªÉ confirm 5. 2FA setting ƒë∆∞·ª£c c·∫≠p nh·∫≠t  **After Enable 2FA:** - User ƒë·ªïi password ‚Üí Ph·∫£i x√°c nh·∫≠n qua email - TƒÉng b·∫£o m·∫≠t  **After Disable 2FA:** - User ƒë·ªïi password ‚Üí ƒê·ªïi ngay (ch·ªâ c·∫ßn old password) - Ti·ªán l·ª£i h∆°n  **Response:** - Success: C·∫≠p nh·∫≠t 2FA setting th√†nh c√¥ng - Error: Token invalid/expired 
         * @summary üåê X√°c nh·∫≠n toggle 2FA
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirm2FAToggle(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirm2FAToggle(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordManagementApi.confirm2FAToggle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  G·ª≠i email reset password cho user qu√™n m·∫≠t kh·∫©u.  **Email Verification:** - Check format email - Check disposable email (block) - Check MX records (domain t·ªìn t·∫°i)  **Flow:** 1. User nh·∫≠p email 2. System verify email 3. T·∫°o token (30 ph√∫t) 4. G·ª≠i email v·ªõi link reset  **Security:** - Kh√¥ng ti·∫øt l·ªô email c√≥ t·ªìn t·∫°i hay kh√¥ng - Lu√¥n return success message - Token one-time use  **Response:** - Success message (d√π email c√≥ t·ªìn t·∫°i hay kh√¥ng) 
         * @summary üåê Qu√™n m·∫≠t kh·∫©u (B∆∞·ªõc 1)
         * @param {ForgotPasswordRequest} forgotPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(forgotPasswordRequest: ForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordManagementApi.forgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Reset password v·ªõi token t·ª´ email.  **Flow:** 1. User nh·∫≠p password m·ªõi + confirm 2. System validate token 3. Check password match 4. Update password (BCrypt hash) 5. Mark token as used 6. User c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi password m·ªõi  **Validations:** - Token valid (ch∆∞a h·∫øt h·∫°n, ch∆∞a d√πng) - Password >= 8 k√Ω t·ª± - Password match confirm password  **Security:** - Token one-time use - Password hashed with BCrypt - Old tokens deleted after success  **Response:** - Success: ƒê·ªïi password th√†nh c√¥ng - Error: Token invalid ho·∫∑c passwords kh√¥ng match 
         * @summary üåê Reset m·∫≠t kh·∫©u (B∆∞·ªõc 3)
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordManagementApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Ki·ªÉm tra token reset password c√≤n h·ª£p l·ªá kh√¥ng.  **Use Case:** - Frontend check token khi user click link trong email - Hi·ªÉn th·ªã form reset password n·∫øu valid - Hi·ªÉn th·ªã error n·∫øu expired/invalid  **Validations:** - Token t·ªìn t·∫°i trong DB - Token ch∆∞a h·∫øt h·∫°n (30 ph√∫t) - Token ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng  **Response:** - true: Token h·ª£p l·ªá, cho ph√©p reset - false: Token expired/invalid 
         * @summary üåê Validate token reset (B∆∞·ªõc 2)
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateResetToken(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateResetToken(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordManagementApi.validateResetToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Validate token ƒë·ªÉ b·∫≠t/t·∫Øt 2FA setting.  **Context:** - User request b·∫≠t/t·∫Øt 2FA cho password change - System g·ª≠i email x√°c nh·∫≠n - User click link trong email - Frontend call API n√†y ƒë·ªÉ validate  **What is 2FA for Password Change?** - Khi B·∫¨T: ƒê·ªïi password ph·∫£i x√°c nh·∫≠n qua email - Khi T·∫ÆT: ƒê·ªïi password ngay l·∫≠p t·ª©c (ch·ªâ c·∫ßn password c≈©)  **Response:** - Success: Token valid - Error: Token expired/invalid 
         * @summary üåê Validate token toggle 2FA
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateToken(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateToken(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordManagementApi.validateToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PasswordManagementApi - factory interface
 */
export const PasswordManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordManagementApiFp(configuration)
    return {
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication (verify qua token)  X√°c nh·∫≠n b·∫≠t/t·∫Øt 2FA cho password change.  **Flow:** 1. User request toggle 2FA (authenticated endpoint) 2. System t·∫°o token + send email 3. User click link trong email 4. Call API n√†y ƒë·ªÉ confirm 5. 2FA setting ƒë∆∞·ª£c c·∫≠p nh·∫≠t  **After Enable 2FA:** - User ƒë·ªïi password ‚Üí Ph·∫£i x√°c nh·∫≠n qua email - TƒÉng b·∫£o m·∫≠t  **After Disable 2FA:** - User ƒë·ªïi password ‚Üí ƒê·ªïi ngay (ch·ªâ c·∫ßn old password) - Ti·ªán l·ª£i h∆°n  **Response:** - Success: C·∫≠p nh·∫≠t 2FA setting th√†nh c√¥ng - Error: Token invalid/expired 
         * @summary üåê X√°c nh·∫≠n toggle 2FA
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirm2FAToggle(token: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.confirm2FAToggle(token, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  G·ª≠i email reset password cho user qu√™n m·∫≠t kh·∫©u.  **Email Verification:** - Check format email - Check disposable email (block) - Check MX records (domain t·ªìn t·∫°i)  **Flow:** 1. User nh·∫≠p email 2. System verify email 3. T·∫°o token (30 ph√∫t) 4. G·ª≠i email v·ªõi link reset  **Security:** - Kh√¥ng ti·∫øt l·ªô email c√≥ t·ªìn t·∫°i hay kh√¥ng - Lu√¥n return success message - Token one-time use  **Response:** - Success message (d√π email c√≥ t·ªìn t·∫°i hay kh√¥ng) 
         * @summary üåê Qu√™n m·∫≠t kh·∫©u (B∆∞·ªõc 1)
         * @param {ForgotPasswordRequest} forgotPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(forgotPasswordRequest: ForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.forgotPassword(forgotPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Reset password v·ªõi token t·ª´ email.  **Flow:** 1. User nh·∫≠p password m·ªõi + confirm 2. System validate token 3. Check password match 4. Update password (BCrypt hash) 5. Mark token as used 6. User c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi password m·ªõi  **Validations:** - Token valid (ch∆∞a h·∫øt h·∫°n, ch∆∞a d√πng) - Password >= 8 k√Ω t·ª± - Password match confirm password  **Security:** - Token one-time use - Password hashed with BCrypt - Old tokens deleted after success  **Response:** - Success: ƒê·ªïi password th√†nh c√¥ng - Error: Token invalid ho·∫∑c passwords kh√¥ng match 
         * @summary üåê Reset m·∫≠t kh·∫©u (B∆∞·ªõc 3)
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.resetPassword(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Ki·ªÉm tra token reset password c√≤n h·ª£p l·ªá kh√¥ng.  **Use Case:** - Frontend check token khi user click link trong email - Hi·ªÉn th·ªã form reset password n·∫øu valid - Hi·ªÉn th·ªã error n·∫øu expired/invalid  **Validations:** - Token t·ªìn t·∫°i trong DB - Token ch∆∞a h·∫øt h·∫°n (30 ph√∫t) - Token ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng  **Response:** - true: Token h·ª£p l·ªá, cho ph√©p reset - false: Token expired/invalid 
         * @summary üåê Validate token reset (B∆∞·ªõc 2)
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateResetToken(token: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.validateResetToken(token, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Validate token ƒë·ªÉ b·∫≠t/t·∫Øt 2FA setting.  **Context:** - User request b·∫≠t/t·∫Øt 2FA cho password change - System g·ª≠i email x√°c nh·∫≠n - User click link trong email - Frontend call API n√†y ƒë·ªÉ validate  **What is 2FA for Password Change?** - Khi B·∫¨T: ƒê·ªïi password ph·∫£i x√°c nh·∫≠n qua email - Khi T·∫ÆT: ƒê·ªïi password ngay l·∫≠p t·ª©c (ch·ªâ c·∫ßn password c≈©)  **Response:** - Success: Token valid - Error: Token expired/invalid 
         * @summary üåê Validate token toggle 2FA
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken(token: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.validateToken(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PasswordManagementApi - object-oriented interface
 */
export class PasswordManagementApi extends BaseAPI {
    /**
     * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication (verify qua token)  X√°c nh·∫≠n b·∫≠t/t·∫Øt 2FA cho password change.  **Flow:** 1. User request toggle 2FA (authenticated endpoint) 2. System t·∫°o token + send email 3. User click link trong email 4. Call API n√†y ƒë·ªÉ confirm 5. 2FA setting ƒë∆∞·ª£c c·∫≠p nh·∫≠t  **After Enable 2FA:** - User ƒë·ªïi password ‚Üí Ph·∫£i x√°c nh·∫≠n qua email - TƒÉng b·∫£o m·∫≠t  **After Disable 2FA:** - User ƒë·ªïi password ‚Üí ƒê·ªïi ngay (ch·ªâ c·∫ßn old password) - Ti·ªán l·ª£i h∆°n  **Response:** - Success: C·∫≠p nh·∫≠t 2FA setting th√†nh c√¥ng - Error: Token invalid/expired 
     * @summary üåê X√°c nh·∫≠n toggle 2FA
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public confirm2FAToggle(token: string, options?: RawAxiosRequestConfig) {
        return PasswordManagementApiFp(this.configuration).confirm2FAToggle(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  G·ª≠i email reset password cho user qu√™n m·∫≠t kh·∫©u.  **Email Verification:** - Check format email - Check disposable email (block) - Check MX records (domain t·ªìn t·∫°i)  **Flow:** 1. User nh·∫≠p email 2. System verify email 3. T·∫°o token (30 ph√∫t) 4. G·ª≠i email v·ªõi link reset  **Security:** - Kh√¥ng ti·∫øt l·ªô email c√≥ t·ªìn t·∫°i hay kh√¥ng - Lu√¥n return success message - Token one-time use  **Response:** - Success message (d√π email c√≥ t·ªìn t·∫°i hay kh√¥ng) 
     * @summary üåê Qu√™n m·∫≠t kh·∫©u (B∆∞·ªõc 1)
     * @param {ForgotPasswordRequest} forgotPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public forgotPassword(forgotPasswordRequest: ForgotPasswordRequest, options?: RawAxiosRequestConfig) {
        return PasswordManagementApiFp(this.configuration).forgotPassword(forgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Reset password v·ªõi token t·ª´ email.  **Flow:** 1. User nh·∫≠p password m·ªõi + confirm 2. System validate token 3. Check password match 4. Update password (BCrypt hash) 5. Mark token as used 6. User c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi password m·ªõi  **Validations:** - Token valid (ch∆∞a h·∫øt h·∫°n, ch∆∞a d√πng) - Password >= 8 k√Ω t·ª± - Password match confirm password  **Security:** - Token one-time use - Password hashed with BCrypt - Old tokens deleted after success  **Response:** - Success: ƒê·ªïi password th√†nh c√¥ng - Error: Token invalid ho·∫∑c passwords kh√¥ng match 
     * @summary üåê Reset m·∫≠t kh·∫©u (B∆∞·ªõc 3)
     * @param {ResetPasswordRequest} resetPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public resetPassword(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return PasswordManagementApiFp(this.configuration).resetPassword(resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Ki·ªÉm tra token reset password c√≤n h·ª£p l·ªá kh√¥ng.  **Use Case:** - Frontend check token khi user click link trong email - Hi·ªÉn th·ªã form reset password n·∫øu valid - Hi·ªÉn th·ªã error n·∫øu expired/invalid  **Validations:** - Token t·ªìn t·∫°i trong DB - Token ch∆∞a h·∫øt h·∫°n (30 ph√∫t) - Token ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng  **Response:** - true: Token h·ª£p l·ªá, cho ph√©p reset - false: Token expired/invalid 
     * @summary üåê Validate token reset (B∆∞·ªõc 2)
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public validateResetToken(token: string, options?: RawAxiosRequestConfig) {
        return PasswordManagementApiFp(this.configuration).validateResetToken(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access:** üåê Public - Kh√¥ng c·∫ßn authentication  Validate token ƒë·ªÉ b·∫≠t/t·∫Øt 2FA setting.  **Context:** - User request b·∫≠t/t·∫Øt 2FA cho password change - System g·ª≠i email x√°c nh·∫≠n - User click link trong email - Frontend call API n√†y ƒë·ªÉ validate  **What is 2FA for Password Change?** - Khi B·∫¨T: ƒê·ªïi password ph·∫£i x√°c nh·∫≠n qua email - Khi T·∫ÆT: ƒê·ªïi password ngay l·∫≠p t·ª©c (ch·ªâ c·∫ßn password c≈©)  **Response:** - Success: Token valid - Error: Token expired/invalid 
     * @summary üåê Validate token toggle 2FA
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public validateToken(token: string, options?: RawAxiosRequestConfig) {
        return PasswordManagementApiFp(this.configuration).validateToken(token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShipperManagementApi - axios parameter creator
 */
export const ShipperManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ƒê·∫∑t tr·∫°ng th√°i shipper th√†nh active (isActive = true). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary K√≠ch ho·∫°t shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateShipper: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activateShipper', 'id', id)
            const localVarPath = `/api/shippers/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * T·∫°o t√†i kho·∫£n shipper m·ªõi. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T·∫°o m·ªõi shipper
         * @param {ShipperRequest} shipperRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipper: async (shipperRequest: ShipperRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipperRequest' is not null or undefined
            assertParamExists('createShipper', 'shipperRequest', shipperRequest)
            const localVarPath = `/api/shippers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shipperRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ƒê·∫∑t tr·∫°ng th√°i shipper th√†nh inactive (isActive = false). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary V√¥ hi·ªáu h√≥a shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateShipper: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deactivateShipper', 'id', id)
            const localVarPath = `/api/shippers/{id}/deactivate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * X√≥a shipper kh·ªèi h·ªá th·ªëng. Ch·ªâ x√≥a ƒë∆∞·ª£c n·∫øu shipper kh√¥ng c√≥ shipments ƒëang giao. Y√™u c·∫ßu quy·ªÅn ADMIN.
         * @summary X√≥a shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShipper: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteShipper', 'id', id)
            const localVarPath = `/api/shippers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * L·∫•y danh s√°ch c√°c shippers ƒëang trong tr·∫°ng th√°i ho·∫°t ƒë·ªông (isActive = true). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y danh s√°ch shippers ƒëang ho·∫°t ƒë·ªông
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveShippers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shippers/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * L·∫•y danh s√°ch t·∫•t c·∫£ shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y danh s√°ch shipper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllShippers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shippers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y th√¥ng tin shipper theo ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipperById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getShipperById', 'id', id)
            const localVarPath = `/api/shippers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * L·∫•y th·ªëng k√™ s·ªë l∆∞·ª£ng shipments: t·ªïng s·ªë, ƒë√£ ho√†n th√†nh, ƒëang giao h√†ng. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y th·ªëng k√™ shipments c·ªßa shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipperStatistics: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getShipperStatistics', 'id', id)
            const localVarPath = `/api/shippers/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * T√¨m ki·∫øm shippers c√≥ t√™n ch·ª©a t·ª´ kh√≥a (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T√¨m shippers theo t√™n
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippersByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getShippersByName', 'name', name)
            const localVarPath = `/api/shippers/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * T√¨m ki·∫øm shippers c√≥ s·ªë ƒëi·ªán tho·∫°i ch·ª©a t·ª´ kh√≥a. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T√¨m shippers theo s·ªë ƒëi·ªán tho·∫°i
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippersByPhone: async (phone: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('getShippersByPhone', 'phone', phone)
            const localVarPath = `/api/shippers/phone/{phone}`
                .replace(`{${"phone"}}`, encodeURIComponent(String(phone)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * C·∫≠p nh·∫≠t th√¥ng tin c·ªßa shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary C·∫≠p nh·∫≠t th√¥ng tin shipper
         * @param {number} id 
         * @param {ShipperRequest} shipperRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipper: async (id: number, shipperRequest: ShipperRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateShipper', 'id', id)
            // verify required parameter 'shipperRequest' is not null or undefined
            assertParamExists('updateShipper', 'shipperRequest', shipperRequest)
            const localVarPath = `/api/shippers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shipperRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipperManagementApi - functional programming interface
 */
export const ShipperManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipperManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * ƒê·∫∑t tr·∫°ng th√°i shipper th√†nh active (isActive = true). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary K√≠ch ho·∫°t shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateShipper(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipperResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateShipper(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.activateShipper']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * T·∫°o t√†i kho·∫£n shipper m·ªõi. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T·∫°o m·ªõi shipper
         * @param {ShipperRequest} shipperRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShipper(shipperRequest: ShipperRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipperResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShipper(shipperRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.createShipper']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ƒê·∫∑t tr·∫°ng th√°i shipper th√†nh inactive (isActive = false). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary V√¥ hi·ªáu h√≥a shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateShipper(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipperResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateShipper(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.deactivateShipper']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * X√≥a shipper kh·ªèi h·ªá th·ªëng. Ch·ªâ x√≥a ƒë∆∞·ª£c n·∫øu shipper kh√¥ng c√≥ shipments ƒëang giao. Y√™u c·∫ßu quy·ªÅn ADMIN.
         * @summary X√≥a shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShipper(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShipper(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.deleteShipper']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * L·∫•y danh s√°ch c√°c shippers ƒëang trong tr·∫°ng th√°i ho·∫°t ƒë·ªông (isActive = true). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y danh s√°ch shippers ƒëang ho·∫°t ƒë·ªông
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveShippers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShipperResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveShippers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.getActiveShippers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * L·∫•y danh s√°ch t·∫•t c·∫£ shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y danh s√°ch shipper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllShippers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShipperResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllShippers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.getAllShippers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y th√¥ng tin shipper theo ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipperById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipperResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipperById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.getShipperById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * L·∫•y th·ªëng k√™ s·ªë l∆∞·ª£ng shipments: t·ªïng s·ªë, ƒë√£ ho√†n th√†nh, ƒëang giao h√†ng. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y th·ªëng k√™ shipments c·ªßa shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipperStatistics(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipperStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipperStatistics(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.getShipperStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * T√¨m ki·∫øm shippers c√≥ t√™n ch·ª©a t·ª´ kh√≥a (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T√¨m shippers theo t√™n
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippersByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShipperResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShippersByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.getShippersByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * T√¨m ki·∫øm shippers c√≥ s·ªë ƒëi·ªán tho·∫°i ch·ª©a t·ª´ kh√≥a. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T√¨m shippers theo s·ªë ƒëi·ªán tho·∫°i
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippersByPhone(phone: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShipperResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShippersByPhone(phone, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.getShippersByPhone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * C·∫≠p nh·∫≠t th√¥ng tin c·ªßa shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary C·∫≠p nh·∫≠t th√¥ng tin shipper
         * @param {number} id 
         * @param {ShipperRequest} shipperRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipper(id: number, shipperRequest: ShipperRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipperResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipper(id, shipperRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipperManagementApi.updateShipper']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShipperManagementApi - factory interface
 */
export const ShipperManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipperManagementApiFp(configuration)
    return {
        /**
         * ƒê·∫∑t tr·∫°ng th√°i shipper th√†nh active (isActive = true). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary K√≠ch ho·∫°t shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateShipper(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ShipperResponse> {
            return localVarFp.activateShipper(id, options).then((request) => request(axios, basePath));
        },
        /**
         * T·∫°o t√†i kho·∫£n shipper m·ªõi. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T·∫°o m·ªõi shipper
         * @param {ShipperRequest} shipperRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipper(shipperRequest: ShipperRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShipperResponse> {
            return localVarFp.createShipper(shipperRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ƒê·∫∑t tr·∫°ng th√°i shipper th√†nh inactive (isActive = false). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary V√¥ hi·ªáu h√≥a shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateShipper(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ShipperResponse> {
            return localVarFp.deactivateShipper(id, options).then((request) => request(axios, basePath));
        },
        /**
         * X√≥a shipper kh·ªèi h·ªá th·ªëng. Ch·ªâ x√≥a ƒë∆∞·ª£c n·∫øu shipper kh√¥ng c√≥ shipments ƒëang giao. Y√™u c·∫ßu quy·ªÅn ADMIN.
         * @summary X√≥a shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShipper(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteShipper(id, options).then((request) => request(axios, basePath));
        },
        /**
         * L·∫•y danh s√°ch c√°c shippers ƒëang trong tr·∫°ng th√°i ho·∫°t ƒë·ªông (isActive = true). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y danh s√°ch shippers ƒëang ho·∫°t ƒë·ªông
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveShippers(options?: RawAxiosRequestConfig): AxiosPromise<Array<ShipperResponse>> {
            return localVarFp.getActiveShippers(options).then((request) => request(axios, basePath));
        },
        /**
         * L·∫•y danh s√°ch t·∫•t c·∫£ shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y danh s√°ch shipper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllShippers(options?: RawAxiosRequestConfig): AxiosPromise<Array<ShipperResponse>> {
            return localVarFp.getAllShippers(options).then((request) => request(axios, basePath));
        },
        /**
         * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y th√¥ng tin shipper theo ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipperById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ShipperResponse> {
            return localVarFp.getShipperById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * L·∫•y th·ªëng k√™ s·ªë l∆∞·ª£ng shipments: t·ªïng s·ªë, ƒë√£ ho√†n th√†nh, ƒëang giao h√†ng. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary L·∫•y th·ªëng k√™ shipments c·ªßa shipper
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipperStatistics(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ShipperStatistics> {
            return localVarFp.getShipperStatistics(id, options).then((request) => request(axios, basePath));
        },
        /**
         * T√¨m ki·∫øm shippers c√≥ t√™n ch·ª©a t·ª´ kh√≥a (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T√¨m shippers theo t√™n
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippersByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ShipperResponse>> {
            return localVarFp.getShippersByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * T√¨m ki·∫øm shippers c√≥ s·ªë ƒëi·ªán tho·∫°i ch·ª©a t·ª´ kh√≥a. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary T√¨m shippers theo s·ªë ƒëi·ªán tho·∫°i
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippersByPhone(phone: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ShipperResponse>> {
            return localVarFp.getShippersByPhone(phone, options).then((request) => request(axios, basePath));
        },
        /**
         * C·∫≠p nh·∫≠t th√¥ng tin c·ªßa shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
         * @summary C·∫≠p nh·∫≠t th√¥ng tin shipper
         * @param {number} id 
         * @param {ShipperRequest} shipperRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipper(id: number, shipperRequest: ShipperRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShipperResponse> {
            return localVarFp.updateShipper(id, shipperRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipperManagementApi - object-oriented interface
 */
export class ShipperManagementApi extends BaseAPI {
    /**
     * ƒê·∫∑t tr·∫°ng th√°i shipper th√†nh active (isActive = true). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary K√≠ch ho·∫°t shipper
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public activateShipper(id: number, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).activateShipper(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * T·∫°o t√†i kho·∫£n shipper m·ªõi. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary T·∫°o m·ªõi shipper
     * @param {ShipperRequest} shipperRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createShipper(shipperRequest: ShipperRequest, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).createShipper(shipperRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ƒê·∫∑t tr·∫°ng th√°i shipper th√†nh inactive (isActive = false). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary V√¥ hi·ªáu h√≥a shipper
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deactivateShipper(id: number, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).deactivateShipper(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * X√≥a shipper kh·ªèi h·ªá th·ªëng. Ch·ªâ x√≥a ƒë∆∞·ª£c n·∫øu shipper kh√¥ng c√≥ shipments ƒëang giao. Y√™u c·∫ßu quy·ªÅn ADMIN.
     * @summary X√≥a shipper
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteShipper(id: number, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).deleteShipper(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * L·∫•y danh s√°ch c√°c shippers ƒëang trong tr·∫°ng th√°i ho·∫°t ƒë·ªông (isActive = true). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary L·∫•y danh s√°ch shippers ƒëang ho·∫°t ƒë·ªông
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getActiveShippers(options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).getActiveShippers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary L·∫•y danh s√°ch shipper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getAllShippers(options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).getAllShippers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary L·∫•y th√¥ng tin shipper theo ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getShipperById(id: number, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).getShipperById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * L·∫•y th·ªëng k√™ s·ªë l∆∞·ª£ng shipments: t·ªïng s·ªë, ƒë√£ ho√†n th√†nh, ƒëang giao h√†ng. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary L·∫•y th·ªëng k√™ shipments c·ªßa shipper
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getShipperStatistics(id: number, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).getShipperStatistics(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * T√¨m ki·∫øm shippers c√≥ t√™n ch·ª©a t·ª´ kh√≥a (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng). Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary T√¨m shippers theo t√™n
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getShippersByName(name: string, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).getShippersByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * T√¨m ki·∫øm shippers c√≥ s·ªë ƒëi·ªán tho·∫°i ch·ª©a t·ª´ kh√≥a. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary T√¨m shippers theo s·ªë ƒëi·ªán tho·∫°i
     * @param {string} phone 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getShippersByPhone(phone: string, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).getShippersByPhone(phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin c·ªßa shipper. Y√™u c·∫ßu quy·ªÅn ADMIN, STAFF ho·∫∑c MANAGER.
     * @summary C·∫≠p nh·∫≠t th√¥ng tin shipper
     * @param {number} id 
     * @param {ShipperRequest} shipperRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateShipper(id: number, shipperRequest: ShipperRequest, options?: RawAxiosRequestConfig) {
        return ShipperManagementApiFp(this.configuration).updateShipper(id, shipperRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



